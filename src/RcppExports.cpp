// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// chk_omp
bool chk_omp();
RcppExport SEXP _copre_chk_omp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(chk_omp());
    return rcpp_result_gen;
END_RCPP
}
// copre_cpp
arma::mat copre_cpp(arma::mat y_perm, arma::vec alpha, double rho, arma::uword N, arma::uword k, arma::mat& P, arma::vec grd, arma::uword nthreads);
RcppExport SEXP _copre_copre_cpp(SEXP y_permSEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP NSEXP, SEXP kSEXP, SEXP PSEXP, SEXP grdSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y_perm(y_permSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type grd(grdSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(copre_cpp(y_perm, alpha, rho, N, k, P, grd, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// marg_cpp
Rcpp::List marg_cpp(arma::vec y, arma::uword k, arma::uvec z0, arma::uword bas_idx, arma::vec bas_pars, arma::vec bas_hpars, arma::uword seq_idx, arma::vec seq_pars, arma::vec seq_hpars, arma::uword burn, arma::uword thin);
RcppExport SEXP _copre_marg_cpp(SEXP ySEXP, SEXP kSEXP, SEXP z0SEXP, SEXP bas_idxSEXP, SEXP bas_parsSEXP, SEXP bas_hparsSEXP, SEXP seq_idxSEXP, SEXP seq_parsSEXP, SEXP seq_hparsSEXP, SEXP burnSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< arma::uword >::type bas_idx(bas_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bas_pars(bas_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bas_hpars(bas_hparsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type seq_idx(seq_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type seq_pars(seq_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type seq_hpars(seq_hparsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(marg_cpp(y, k, z0, bas_idx, bas_pars, bas_hpars, seq_idx, seq_pars, seq_hpars, burn, thin));
    return rcpp_result_gen;
END_RCPP
}
// seqre_cpp
Rcpp::List seqre_cpp(Rcpp::List phi, arma::uword n, arma::uword bas_idx, arma::vec bas_pars, arma::vec bas_hpars, arma::uword seq_idx, arma::vec seq_pars, arma::vec seq_hpars, double eps, arma::uword inc, arma::uword max_it);
RcppExport SEXP _copre_seqre_cpp(SEXP phiSEXP, SEXP nSEXP, SEXP bas_idxSEXP, SEXP bas_parsSEXP, SEXP bas_hparsSEXP, SEXP seq_idxSEXP, SEXP seq_parsSEXP, SEXP seq_hparsSEXP, SEXP epsSEXP, SEXP incSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type bas_idx(bas_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bas_pars(bas_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bas_hpars(bas_hparsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type seq_idx(seq_idxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type seq_pars(seq_parsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type seq_hpars(seq_hparsSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type inc(incSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(seqre_cpp(phi, n, bas_idx, bas_pars, bas_hpars, seq_idx, seq_pars, seq_hpars, eps, inc, max_it));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_copre_chk_omp", (DL_FUNC) &_copre_chk_omp, 0},
    {"_copre_copre_cpp", (DL_FUNC) &_copre_copre_cpp, 8},
    {"_copre_marg_cpp", (DL_FUNC) &_copre_marg_cpp, 11},
    {"_copre_seqre_cpp", (DL_FUNC) &_copre_seqre_cpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_copre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
